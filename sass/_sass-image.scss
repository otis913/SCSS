// =================================================================
// This file is dynamically generated by gulp-compass-imagehelper
// Do NOT edit!
// =================================================================

// Returns if the image is accessible for these image-helpers
// Note: Not part of the official compass functions, but still useful
@function image-exists($image) {
    @return map-has-key($compass-imagehelper-imagesmap, $image);
  }
  
  // Embeds the contents of an image directly inside your stylesheet, eliminating the need for another HTTP request. For small images, this can be a performance
  // benefit at the cost of a larger generated CSS file.
  @function inline-image($image) {
    @if image-exists($image) {
      $list: map-get($compass-imagehelper-imagesmap, $image);
      @return unquote(map-get($list, 'data'));
    }
    @warn "Image '#{$image}' not found.";
    @return null;
  }
  
  // Returns the width of the image found at the path supplied by $image relative to your project's images directory.
  @function image-width($image) {
    @if image-exists($image) {
      $list: map-get($compass-imagehelper-imagesmap, $image);
      $width: unquote(map-get($list, 'width'));
      @if ($width and str-length($width) > 0) {
        @return number($width) * 1px;
      }
    }
    @warn "Image '#{$image}' not found.";
    @return null;
  }
  
  // Returns the height of the image found at the path supplied by $image relative to your project's images directory.
  @function image-height($image) {
    @if image-exists($image) {
      $list: map-get($compass-imagehelper-imagesmap, $image);
      $height: unquote(map-get($list, 'height'));
      @if ($height and str-length($height) > 0) {
        @return number($height) * 1px;
      }
    }
    @warn "Image '#{$image}' not found.";
    @return null;
  }
  
  // Generates a path to an asset found relative to the project's images directory.
  // Passing a true value as the second argument will cause only the path to be returned instead of a url() function
  // The third argument is used to control the cache buster on a per-use basis. When set to false no cache buster will be used.
  // When true a md5-hash of the file is appended to the url. When a string, that value will be used as the cache buster.
  @function image-url($image, $only-path: false, $cache-buster: false) {
    $result: $compass-imagehelper-path-prefix + $image;
  
    @if not(image-exists($image)) {
      @warn "Image '#{$image}' not found.";
    } @else {
      @if (type-of($cache-buster) == string) {
        $result: $result + '?' + $cache-buster;
      }
  
      @if ($cache-buster == true) {
        $list: map-get($compass-imagehelper-imagesmap, $image);
        $hash: map-get($list, 'hash');
        $result: $result + '?' + $hash;
      }
    }
  
    $result: quote($result);
  
    @if ($only-path == false) {
      $result: url($result);
    }
  
    @return $result;
  }
  
  // Two helper functions for casting string to number by Hugo Giraudel
  // http://hugogiraudel.com/2014/01/15/sass-string-to-number/
  // http://sassmeister.com/gist/9647408
  @function _length($number, $unit) {
    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
    $units: 1px 1cm 1mm 1% 1ch 1 pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;
    $index: index($strings, $unit);
  
    @if not ($index) {
      @warn "Unknown unit `#{$unit}`.";
      @return false;
    }
  
    @return $number * nth($units, $index);
  }
  
  @function number($string) {
    // Matrices
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers: 0 1 2 3 4 5 6 7 8 9;
  
    // Result
    $result: 0;
    $divider: 0;
    $minus: false;
  
    // Looping through all characters
    @for $i from 1 through str-length($string) {
      $character: str-slice($string, $i, $i);
      $index: index($strings, $character);
  
      @if $character == '-' {
        $minus: true;
      } @else if $character == '.' {
        $divider: 1;
      } @else {
        @if not ($index) {
          $result: if($minus, $result * -1, $result);
          @return _length($result, str-slice($string, $i));
        }
  
        $number: nth($numbers, $index);
  
        @if $divider == 0 {
          $result: $result * 10;
        } @else {
          // Move the decimal dot to the left
          $divider: $divider * 10;
          $number: $number / $divider;
        }
  
        $result: $result + $number;
      }
    }
  
    @return if($minus, $result * -1, $result);
  }
  
  $compass-imagehelper-path-prefix: '../../../src/sass_img/';
  
  $compass-imagehelper-imagesmap: (
    'i-Facebook.svg': (
      width: '8',
      height: '15',
      data: 'url("data:image/svg+xml;charset=utf8,%3Csvg width=%228%22 height=%2215%22 viewBox=%220 0 8 15%22 fill=%22none%22 xmlns=%22http://www.w3.org/2000/svg%22%3E %3Cpath fill-rule=%22evenodd%22 clip-rule=%22evenodd%22 d=%22M7.61452 0.993067V3.20234L6.3033 3.20575C5.2755 3.20575 5.07745 3.69404 5.07745 4.4077V5.98868H7.52574L7.20818 8.46087H5.07745V14.894H2.52364V8.46087H0.385742V5.98868H2.52364V4.16526C2.52364 2.04819 3.81403 0.894043 5.70574 0.894043C6.60755 0.894043 7.38574 0.962336 7.61452 0.993067Z%22 fill=%22%23179859%22/%3E %3C/svg%3E ")',
      hash: '5a8dc78c8d8c27f30100dc73e8aead9e'
    ),
    'i-Instagram.svg': (
      width: '14',
      height: '15',
      data: 'url("data:image/svg+xml;charset=utf8,%3Csvg width=%2214%22 height=%2215%22 viewBox=%220 0 14 15%22 fill=%22none%22 xmlns=%22http://www.w3.org/2000/svg%22%3E %3Cpath d=%22M6.9984 1.86475C5.36085 1.86475 5.15534 1.87191 4.51218 1.90118C3.87028 1.93057 3.43212 2.0322 3.04874 2.18131C2.65216 2.33532 2.31576 2.54134 1.98061 2.87663C1.64521 3.21178 1.4392 3.5482 1.28469 3.94466C1.13521 4.32818 1.03346 4.76647 1.00457 5.40814C0.975799 6.05133 0.968262 6.25697 0.968262 7.89457C0.968262 9.53217 0.975548 9.73705 1.00469 10.3802C1.03421 11.0222 1.13584 11.4603 1.28482 11.8437C1.43895 12.2403 1.64496 12.5767 1.98024 12.9119C2.31526 13.2473 2.65166 13.4538 3.04798 13.6078C3.43162 13.7569 3.8699 13.8586 4.51168 13.888C5.15484 13.9172 5.36022 13.9244 6.99765 13.9244C8.63532 13.9244 8.8402 13.9172 9.48336 13.888C10.1253 13.8586 10.5639 13.7569 10.9476 13.6078C11.344 13.4538 11.6799 13.2473 12.0149 12.9119C12.3503 12.5767 12.5563 12.2403 12.7109 11.8438C12.8591 11.4603 12.9608 11.022 12.991 10.3804C13.0199 9.73718 13.0274 9.53217 13.0274 7.89457C13.0274 6.25697 13.0199 6.05145 12.991 5.40827C12.9608 4.76635 12.8591 4.32818 12.7109 3.94478C12.5563 3.5482 12.3503 3.21178 12.0149 2.87663C11.6795 2.54122 11.3441 2.3352 10.9472 2.18131C10.5628 2.0322 10.1244 1.93057 9.48248 1.90118C8.83932 1.87191 8.63457 1.86475 6.99652 1.86475H6.9984ZM6.45749 2.95137C6.61803 2.95112 6.79716 2.95137 6.9984 2.95137C8.60831 2.95137 8.79913 2.95715 9.43488 2.98604C10.0228 3.01292 10.3418 3.11116 10.5544 3.19369C10.8358 3.30298 11.0364 3.43363 11.2473 3.64467C11.4583 3.85572 11.589 4.05671 11.6985 4.3381C11.781 4.5504 11.8794 4.86948 11.9061 5.45739C11.935 6.09303 11.9413 6.28398 11.9413 7.89318C11.9413 9.50239 11.935 9.69334 11.9061 10.329C11.8793 10.9169 11.781 11.236 11.6985 11.4483C11.5892 11.7297 11.4583 11.93 11.2473 12.1409C11.0362 12.352 10.8359 12.4826 10.5544 12.5919C10.3421 12.6748 10.0228 12.7728 9.43488 12.7997C8.79925 12.8286 8.60831 12.8349 6.9984 12.8349C5.38836 12.8349 5.19755 12.8286 4.56192 12.7997C3.97404 12.7726 3.65497 12.6743 3.4423 12.5918C3.16091 12.4825 2.95993 12.3519 2.74889 12.1408C2.53785 11.9298 2.40721 11.7293 2.29767 11.4478C2.21514 11.2355 2.11678 10.9164 2.09003 10.3285C2.06113 9.69283 2.05535 9.50189 2.05535 7.89168C2.05535 6.28146 2.06113 6.09152 2.09003 5.45588C2.11691 4.86797 2.21514 4.5489 2.29767 4.33634C2.40696 4.05495 2.53785 3.85396 2.74889 3.64291C2.95993 3.43187 3.16091 3.30123 3.4423 3.19168C3.65484 3.10877 3.97404 3.01079 4.56192 2.98378C5.11816 2.95866 5.33372 2.95112 6.45749 2.94986V2.95137ZM10.217 3.95257C9.81751 3.95257 9.49341 4.2763 9.49341 4.6759C9.49341 5.07537 9.81751 5.39948 10.217 5.39948C10.6164 5.39948 10.9405 5.07537 10.9405 4.6759C10.9405 4.27642 10.6164 3.95232 10.217 3.95232V3.95257ZM6.9984 4.798C5.28837 4.798 3.90193 6.18448 3.90193 7.89457C3.90193 9.60465 5.28837 10.9905 6.9984 10.9905C8.70843 10.9905 10.0944 9.60465 10.0944 7.89457C10.0944 6.18448 8.7083 4.798 6.99827 4.798H6.9984ZM6.9984 5.88463C8.10836 5.88463 9.00828 6.78445 9.00828 7.89457C9.00828 9.00456 8.10836 9.90451 6.9984 9.90451C5.88832 9.90451 4.98852 9.00456 4.98852 7.89457C4.98852 6.78445 5.88832 5.88463 6.9984 5.88463Z%22 fill=%22%23179859%22/%3E %3C/svg%3E ")',
      hash: '04095a3c9431320af196b800b9b2085d'
    ),
    'i-Line.svg': (
      width: '14',
      height: '14',
      data: 'url("data:image/svg+xml;charset=utf8,%3Csvg width=%2214%22 height=%2214%22 viewBox=%220 0 14 14%22 fill=%22none%22 xmlns=%22http://www.w3.org/2000/svg%22%3E %3Cpath fill-rule=%22evenodd%22 clip-rule=%22evenodd%22 d=%22M6.96652 5.70538C6.93599 6.09185 6.96515 6.61458 6.96515 7.01609C6.96515 7.2239 6.99569 7.45906 6.89998 7.61675C6.82706 7.73706 6.63748 7.8273 6.45336 7.74755C6.28337 7.67326 6.22412 7.55978 6.22412 7.31778L6.22458 4.69865C6.22503 4.46668 6.2902 4.34181 6.46338 4.27846C6.70538 4.19005 6.83117 4.33816 6.92414 4.45073C7.05174 4.60614 8.24988 6.2828 8.31232 6.32108C8.3073 5.8813 8.31186 5.43968 8.31186 5.00035C8.31186 4.7939 8.28543 4.54233 8.38432 4.40971C8.47091 4.2935 8.67417 4.18367 8.86331 4.30125C9.02464 4.40151 9.05244 4.53322 9.05198 4.77431L9.05244 6.73353C9.05244 7.16511 9.15817 7.66551 8.7676 7.76805C8.55842 7.82274 8.42124 7.68967 8.34285 7.57345L6.96652 5.70538ZM10.279 7.03547C10.5182 7.05188 10.8026 7.03821 11.0469 7.03821C11.3276 7.03821 11.4935 7.02772 11.617 7.21959C11.7515 7.42877 11.6234 7.65619 11.4789 7.73047C11.3012 7.82253 10.2972 7.7806 10.0297 7.78152C9.78085 7.78243 9.61086 7.72273 9.55435 7.51172C9.52108 7.38867 9.52928 4.59681 9.55799 4.50931C9.62863 4.29602 9.77264 4.25455 10.0484 4.25501C10.2995 4.25546 10.551 4.25501 10.8022 4.25501C11.0113 4.25501 11.3263 4.21445 11.4953 4.30696C11.653 4.39355 11.7255 4.61686 11.6088 4.82787C11.5081 5.00971 11.2903 4.99422 11.0282 4.99422C10.7789 4.99422 10.5237 4.98875 10.2771 4.99558L10.279 5.64273C10.69 5.67099 11.3513 5.57847 11.5254 5.7275C11.7665 5.93441 11.6612 6.22881 11.5172 6.31814C11.3294 6.43481 10.6025 6.37966 10.2776 6.38832L10.279 7.03547ZM3.23864 7.04115C3.4779 7.0334 3.72491 7.03887 3.96463 7.03887C4.20709 7.03887 4.40989 7.01061 4.53476 7.16192C4.65599 7.30775 4.64779 7.5575 4.51562 7.68009C4.37708 7.80861 4.15422 7.78081 3.92681 7.78081H3.21084C2.96975 7.78081 2.77196 7.80861 2.62111 7.68146C2.46206 7.54747 2.49898 7.33874 2.49943 7.09173V6.39445C2.49943 5.92367 2.49989 5.45244 2.49989 4.98166C2.49989 4.74878 2.46252 4.51134 2.59696 4.36778C2.71636 4.24063 2.95882 4.21146 3.10967 4.34773C3.27145 4.49265 3.23819 4.66401 3.23819 4.92515L3.23864 7.04115ZM5.2116 4.27959C5.39161 4.21397 5.52606 4.29053 5.61265 4.38897C5.71747 4.50792 5.70288 4.65467 5.70288 4.83104L5.7038 6.95979C5.7038 7.35036 5.76851 7.64021 5.44357 7.75916C5.295 7.81339 5.13002 7.73956 5.0571 7.65753C4.95957 7.5477 4.96185 7.40551 4.96231 7.22367L4.96276 5.09446C4.96322 4.70617 4.89076 4.39672 5.2116 4.27959ZM6.42976 0.240663C5.03201 0.352775 3.65067 0.758383 2.54915 1.51217C2.23378 1.72774 1.86144 2.0185 1.59665 2.27554C1.45902 2.40952 1.31318 2.56356 1.19515 2.72216L1.00647 2.96689C0.973202 3.01247 0.939477 3.04255 0.912589 3.08037C0.014783 4.32591 -0.228582 5.8303 0.218043 7.34974C0.386666 7.92123 0.79911 8.66226 1.21839 9.12119C1.26168 9.16904 1.27445 9.2014 1.31273 9.25336L1.84594 9.77427C2.06515 9.94654 1.97947 9.90916 2.21372 10.0659C2.32584 10.1411 2.36867 10.1999 2.4621 10.251L2.84538 10.4889C3.01309 10.6019 3.06003 10.6352 3.2642 10.7304C3.8079 10.9838 4.13922 11.157 4.82511 11.3174C5.14868 11.3931 6.03145 11.5503 6.21921 11.6378C6.30626 11.6779 6.40971 11.7586 6.44982 11.8219C6.60887 12.0716 6.45802 12.7079 6.41336 12.9726C6.37234 13.2165 6.28393 13.5578 6.60112 13.571C6.81395 13.5797 7.09697 13.443 7.25374 13.3582L9.48823 11.9568C9.62632 11.8688 9.68966 11.7968 9.7243 11.7786C9.86831 11.702 10.4106 11.3151 10.5383 11.1975C10.7611 10.9911 10.7297 11.0399 10.9598 10.8653C11.0304 10.812 11.0063 10.7947 11.0696 10.7505C11.2159 10.6493 11.5331 10.4018 11.6498 10.276C11.6981 10.2245 11.7282 10.2131 11.7665 10.1653C11.8882 10.0149 12.0613 9.90825 12.3006 9.62615C12.348 9.57055 12.3658 9.57374 12.4095 9.52817L12.6105 9.29528C12.7208 9.12712 12.682 9.19548 12.8069 9.05876C12.9751 8.87601 13.0877 8.66226 13.1624 8.56565C13.3196 8.36056 13.527 7.96817 13.6259 7.73028C13.8023 7.30735 13.9495 6.8311 13.9855 6.35577C14.0611 5.36089 13.8387 4.32363 13.3843 3.56847L13.1515 3.17881C12.9459 2.89079 12.7117 2.60732 12.4665 2.3562C10.9575 0.81216 8.55077 0.0706728 6.42976 0.240663Z%22 fill=%22%23179859%22/%3E %3C/svg%3E ")',
      hash: '5fc36f074e14428ceed1520128d14cf7'
    ),
    'i-YouTube.svg': (
      width: '14',
      height: '11',
      data: 'url("data:image/svg+xml;charset=utf8,%3Csvg width=%2214%22 height=%2211%22 viewBox=%220 0 14 11%22 fill=%22none%22 xmlns=%22http://www.w3.org/2000/svg%22%3E %3Cg clip-path=%22url%28%23clip0%29%22%3E %3Cpath d=%22M13.6879 2.54904C13.5274 1.94932 13.0573 1.47646 12.461 1.315C11.3717 1.01514 7.0144 1.01514 7.0144 1.01514C7.0144 1.01514 2.65711 1.01514 1.56778 1.30346C0.98299 1.46493 0.501395 1.94932 0.340863 2.54904C0.0541992 3.64468 0.0541992 5.91671 0.0541992 5.91671C0.0541992 5.91671 0.0541992 8.20026 0.340863 9.28437C0.501395 9.88409 0.971524 10.3569 1.56778 10.5184C2.66857 10.8183 7.0144 10.8183 7.0144 10.8183C7.0144 10.8183 11.3717 10.8183 12.461 10.5299C13.0573 10.3685 13.5274 9.89563 13.6879 9.2959C13.9746 8.20026 13.9746 5.92824 13.9746 5.92824C13.9746 5.92824 13.9861 3.64468 13.6879 2.54904Z%22 fill=%22%23179859%22/%3E %3Cpath d=%22M9.25038 5.9169L5.62695 3.81787V8.01592L9.25038 5.9169Z%22 fill=%22white%22/%3E %3C/g%3E %3Cdefs%3E %3CclipPath id=%22clip0%22%3E %3Crect width=%2214%22 height=%229.86364%22 fill=%22white%22 transform=%22translate%280 0.962402%29%22/%3E %3C/clipPath%3E %3C/defs%3E %3C/svg%3E ")',
      hash: '79b4cb6fb7fc6694047442389ee79869'
    ),
  );
  
  %i-Facebook-svg {
    // Available properties:
    // prefix: ;
    // width: 8;
    // height: 15;
    // filename: i-Facebook.svg;
    // basename: i-Facebook;
    // dirname: sass_img;
    // ext: .svg;
    // path: i-Facebook.svg;
    // fullname: i-Facebook-svg;
    // mime: image/svg+xml;
    // hash: 5a8dc78c8d8c27f30100dc73e8aead9e;
    background-image: inline-image('i-Facebook.svg');
  }
  
  %i-Instagram-svg {
    // Available properties:
    // prefix: ;
    // width: 14;
    // height: 15;
    // filename: i-Instagram.svg;
    // basename: i-Instagram;
    // dirname: sass_img;
    // ext: .svg;
    // path: i-Instagram.svg;
    // fullname: i-Instagram-svg;
    // mime: image/svg+xml;
    // hash: 04095a3c9431320af196b800b9b2085d;
    background-image: inline-image('i-Instagram.svg');
  }
  
  %i-Line-svg {
    // Available properties:
    // prefix: ;
    // width: 14;
    // height: 14;
    // filename: i-Line.svg;
    // basename: i-Line;
    // dirname: sass_img;
    // ext: .svg;
    // path: i-Line.svg;
    // fullname: i-Line-svg;
    // mime: image/svg+xml;
    // hash: 5fc36f074e14428ceed1520128d14cf7;
    background-image: inline-image('i-Line.svg');
  }
  
  %i-YouTube-svg {
    // Available properties:
    // prefix: ;
    // width: 14;
    // height: 11;
    // filename: i-YouTube.svg;
    // basename: i-YouTube;
    // dirname: sass_img;
    // ext: .svg;
    // path: i-YouTube.svg;
    // fullname: i-YouTube-svg;
    // mime: image/svg+xml;
    // hash: 79b4cb6fb7fc6694047442389ee79869;
    background-image: inline-image('i-YouTube.svg');
  }
  
  